// Grammar rules for a small subset of the Rust programming language.
// Example:
// fn main() {
//     let a = 1u8 + 1u8;
// }

// program
program = _{ SOI ~ fn_header ~ "\n"* ~ statement+ ~ "}" ~ "\n"* ~ EOI }


// functions
fn_header = { "fn" ~ ident ~ "(" ~ (input ~ ("," ~ input)*)? ~ ")" ~ "{" }

input = { ident ~ ":" ~ value_type }


// statements
statement = { assign ~ ";" ~ "\n"+ }

assign = { "let" ~ ident ~ "=" ~ expression }


// expressions
expression = { addition }

addition = { multiplication ~ (add_op ~ multiplication)* }

multiplication = { value ~ (mul_op ~ value)* }

// operators
add_op = { "+" | "-"}

mul_op = { "*" | "/" }


// values
value = _{  integer | ident | "(" ~ expression ~ ")" }

value_type = { "u8" }

integer = @{ "_"? ~ ASCII_DIGIT+ ~ value_type }

ident = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }


// misc
WHITESPACE = _{ " " | "\t" }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* }
